{"mappings":"AAYA,MAAMA,UAAoBC,YACxBC,oBACEC,KAAKC,QAAUD,KAAKE,aAAa,WAEjC,IAAIC,EAAYH,KAAKI,cAAc,gBA2BnC,GAzBAJ,KAAKK,UACHF,GAAcA,EAAUG,YAAYC,QACpCP,KAAKE,aAAa,cAClB,OAWGF,KAAKQ,MAAMC,kBACdT,KAAKQ,MAAMC,gBAAkB,+BAA+BT,KAAKC,2BAI9DE,IACHA,EAAYO,SAASC,cAAc,UACnCR,EAAUS,KAAO,SACjBT,EAAUU,UAAUC,IAAI,eACxBd,KAAKe,OAAOZ,KAETA,EAAUG,YAAa,CAC1B,MAAMU,EAAiBN,SAASC,cAAc,QAC9CK,EAAeC,UAAY,sBAC3BD,EAAeV,YAAcN,KAAKK,UAClCF,EAAUY,OAAOC,E,CAEnBb,EAAUe,gBAAgB,QAG1BlB,KAAKmB,iBAAiB,cAAetB,EAAYuB,gBAAiB,CAChEC,MAAM,IAMRrB,KAAKmB,iBAAiB,QAASnB,KAAKsB,WAMpCtB,KAAKuB,sBACHC,UAAUC,OAAOC,SAAS,UAC1BF,UAAUG,UAAUD,SAAS,O,CAMjCE,mBAAmBC,EAAMC,EAAKC,GAC5B,MAAMC,EAAStB,SAASC,cAAc,QACtCqB,EAAOC,IAAMJ,EACbG,EAAOE,KAAOJ,EACVC,IACFC,EAAOD,GAAKA,GAEdrB,SAASyB,KAAKpB,OAAOiB,E,CAYvBJ,yBACM/B,EAAYuC,eAGhBvC,EAAYwC,YAAY,aAAc,oCAEtCxC,EAAYwC,YAAY,aAAc,0BAGtCxC,EAAYwC,YACV,aACA,uCAEFxC,EAAYwC,YAAY,aAAc,kCAEtCxC,EAAYuC,cAAe,E,CAG7BE,mBACMC,OAAOC,IAAOD,OAAOC,IAAMD,OAAOC,GAAGC,SAEzCzC,KAAK0C,aAAe,IAAIC,SAAQ,CAACC,EAAKC,KACpC,IAAIC,EAAKpC,SAASC,cAAc,UAChCmC,EAAGC,IAAM,qCACTD,EAAGE,OAAQ,EACXF,EAAGG,OAASC,IACVV,GAAGW,MAAMP,EAAI,EAEfE,EAAGM,QAAUP,EACb7C,KAAKe,OAAO+B,EAAG,I,CAInBE,wBAAwBK,GACtBrD,KAAKsC,yBACCtC,KAAK0C,aAEX,MAAMY,EAAqB5C,SAASC,cAAc,OAClDX,KAAKe,OAAOuC,GAEZ,MAAMC,EAAYC,OAAOC,YAAYJ,EAAOK,WAE5C,IAAIlB,GAAGC,OAAOa,EAAoB,CAChCK,MAAO,OACP1D,QAASD,KAAKC,QACd2D,WAAYL,EACZM,OAAQ,CACNC,QAASC,IACPA,EAAMC,OAAOC,WAAW,I,CAMhCjB,kBACE,GAAIhD,KAAKa,UAAUqD,SAAS,iBAAkB,OAC9ClE,KAAKa,UAAUC,IAAI,iBAEnB,MAAMuC,EAAS,IAAIc,gBAAgBnE,KAAKE,aAAa,WAAa,IAIlE,GAHAmD,EAAOtC,OAAO,WAAY,KAC1BsC,EAAOtC,OAAO,cAAe,KAEzBf,KAAKuB,sBACP,OAAOvB,KAAKoE,kBAAkBf,GAGhC,MAAMgB,EAAW3D,SAASC,cAAc,UACxC0D,EAASV,MAAQ,IACjBU,EAASC,OAAS,IAElBD,EAASE,MAAQvE,KAAKK,UACtBgE,EAASG,MACP,0EACFH,EAASI,iBAAkB,EAG3BJ,EAAStB,IAAM,0CAA0C2B,mBACvD1E,KAAKC,YACFoD,EAAOsB,aACZ3E,KAAKe,OAAOsD,GAGZA,EAASO,O,EAIbC,eAAeC,OAAO,eAAgBjF","sources":["src/js/lite-yt-embed.js"],"sourcesContent":["/**\n * A lightweight youtube embed. Still should feel the same to the user, just MUCH faster to initialize and paint.\n *\n * Thx to these as the inspiration\n *   https://storage.googleapis.com/amp-vs-non-amp/youtube-lazy.html\n *   https://autoplay-youtube-player.glitch.me/\n *\n * Once built it, I also found these:\n *   https://github.com/ampproject/amphtml/blob/master/extensions/amp-youtube (👍👍)\n *   https://github.com/Daugilas/lazyYT\n *   https://github.com/vb/lazyframe\n */\nclass LiteYTEmbed extends HTMLElement {\n  connectedCallback() {\n    this.videoId = this.getAttribute('videoid');\n\n    let playBtnEl = this.querySelector('.lty-playbtn');\n    // A label for the button takes priority over a [playlabel] attribute on the custom-element\n    this.playLabel =\n      (playBtnEl && playBtnEl.textContent.trim()) ||\n      this.getAttribute('playlabel') ||\n      'Play';\n\n    /**\n     * Lo, the youtube placeholder image!  (aka the thumbnail, poster image, etc)\n     *\n     * See https://github.com/paulirish/lite-youtube-embed/blob/master/youtube-thumbnail-urls.md\n     *\n     * TODO: Do the sddefault->hqdefault fallback\n     *       - When doing this, apply referrerpolicy (https://github.com/ampproject/amphtml/pull/3940)\n     * TODO: Consider using webp if supported, falling back to jpg\n     */\n    if (!this.style.backgroundImage) {\n      this.style.backgroundImage = `url(\"https://i.ytimg.com/vi/${this.videoId}/hqdefault.jpg\")`;\n    }\n\n    // Set up play button, and its visually hidden label\n    if (!playBtnEl) {\n      playBtnEl = document.createElement('button');\n      playBtnEl.type = 'button';\n      playBtnEl.classList.add('lty-playbtn');\n      this.append(playBtnEl);\n    }\n    if (!playBtnEl.textContent) {\n      const playBtnLabelEl = document.createElement('span');\n      playBtnLabelEl.className = 'lyt-visually-hidden';\n      playBtnLabelEl.textContent = this.playLabel;\n      playBtnEl.append(playBtnLabelEl);\n    }\n    playBtnEl.removeAttribute('href');\n\n    // On hover (or tap), warm up the TCP connections we're (likely) about to use.\n    this.addEventListener('pointerover', LiteYTEmbed.warmConnections, {\n      once: true,\n    });\n\n    // Once the user clicks, add the real iframe and drop our play button\n    // TODO: In the future we could be like amp-youtube and silently swap in the iframe during idle time\n    //   We'd want to only do this for in-viewport or near-viewport ones: https://github.com/ampproject/amphtml/pull/5003\n    this.addEventListener('click', this.addIframe);\n\n    // Chrome & Edge desktop have no problem with the basic YouTube Embed with ?autoplay=1\n    // However Safari desktop and most/all mobile browsers do not successfully track the user gesture of clicking through the creation/loading of the iframe,\n    // so they don't autoplay automatically. Instead we must load an additional 2 sequential JS files (1KB + 165KB) (un-br) for the YT Player API\n    // TODO: Try loading the the YT API in parallel with our iframe and then attaching/playing it. #82\n    this.needsYTApiForAutoplay =\n      navigator.vendor.includes('Apple') ||\n      navigator.userAgent.includes('Mobi');\n  }\n\n  /**\n   * Add a <link rel={preload | preconnect} ...> to the head\n   */\n  static addPrefetch(kind, url, as) {\n    const linkEl = document.createElement('link');\n    linkEl.rel = kind;\n    linkEl.href = url;\n    if (as) {\n      linkEl.as = as;\n    }\n    document.head.append(linkEl);\n  }\n\n  /**\n   * Begin pre-connecting to warm up the iframe load\n   * Since the embed's network requests load within its iframe,\n   *   preload/prefetch'ing them outside the iframe will only cause double-downloads.\n   * So, the best we can do is warm up a few connections to origins that are in the critical path.\n   *\n   * Maybe `<link rel=preload as=document>` would work, but it's unsupported: http://crbug.com/593267\n   * But TBH, I don't think it'll happen soon with Site Isolation and split caches adding serious complexity.\n   */\n  static warmConnections() {\n    if (LiteYTEmbed.preconnected) return;\n\n    // The iframe document and most of its subresources come right off youtube.com\n    LiteYTEmbed.addPrefetch('preconnect', 'https://www.youtube-nocookie.com');\n    // The botguard script is fetched off from google.com\n    LiteYTEmbed.addPrefetch('preconnect', 'https://www.google.com');\n\n    // Not certain if these ad related domains are in the critical path. Could verify with domain-specific throttling.\n    LiteYTEmbed.addPrefetch(\n      'preconnect',\n      'https://googleads.g.doubleclick.net'\n    );\n    LiteYTEmbed.addPrefetch('preconnect', 'https://static.doubleclick.net');\n\n    LiteYTEmbed.preconnected = true;\n  }\n\n  fetchYTPlayerApi() {\n    if (window.YT || (window.YT && window.YT.Player)) return;\n\n    this.ytApiPromise = new Promise((res, rej) => {\n      var el = document.createElement('script');\n      el.src = 'https://www.youtube.com/iframe_api';\n      el.async = true;\n      el.onload = _ => {\n        YT.ready(res);\n      };\n      el.onerror = rej;\n      this.append(el);\n    });\n  }\n\n  async addYTPlayerIframe(params) {\n    this.fetchYTPlayerApi();\n    await this.ytApiPromise;\n\n    const videoPlaceholderEl = document.createElement('div');\n    this.append(videoPlaceholderEl);\n\n    const paramsObj = Object.fromEntries(params.entries());\n\n    new YT.Player(videoPlaceholderEl, {\n      width: '100%',\n      videoId: this.videoId,\n      playerVars: paramsObj,\n      events: {\n        onReady: event => {\n          event.target.playVideo();\n        },\n      },\n    });\n  }\n\n  async addIframe() {\n    if (this.classList.contains('lyt-activated')) return;\n    this.classList.add('lyt-activated');\n\n    const params = new URLSearchParams(this.getAttribute('params') || []);\n    params.append('autoplay', '1');\n    params.append('playsinline', '1');\n\n    if (this.needsYTApiForAutoplay) {\n      return this.addYTPlayerIframe(params);\n    }\n\n    const iframeEl = document.createElement('iframe');\n    iframeEl.width = 560;\n    iframeEl.height = 315;\n    // No encoding necessary as [title] is safe. https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#:~:text=Safe%20HTML%20Attributes%20include\n    iframeEl.title = this.playLabel;\n    iframeEl.allow =\n      'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture';\n    iframeEl.allowFullscreen = true;\n    // AFAIK, the encoding here isn't necessary for XSS, but we'll do it only because this is a URL\n    // https://stackoverflow.com/q/64959723/89484\n    iframeEl.src = `https://www.youtube-nocookie.com/embed/${encodeURIComponent(\n      this.videoId\n    )}?${params.toString()}`;\n    this.append(iframeEl);\n\n    // Set focus for a11y\n    iframeEl.focus();\n  }\n}\n// Register custom element\ncustomElements.define('lite-youtube', LiteYTEmbed);\n"],"names":["$f65eaf5016d54892$var$LiteYTEmbed","HTMLElement","connectedCallback","this","videoId","getAttribute","playBtnEl","querySelector","playLabel","textContent","trim","style","backgroundImage","document","createElement","type","classList","add","append","playBtnLabelEl","className","removeAttribute","addEventListener","warmConnections","once","addIframe","needsYTApiForAutoplay","navigator","vendor","includes","userAgent","static","kind","url","as","linkEl","rel","href","head","preconnected","addPrefetch","fetchYTPlayerApi","window","YT","Player","ytApiPromise","Promise","res","rej","el","src","async","onload","_","ready","onerror","params","videoPlaceholderEl","paramsObj","Object","fromEntries","entries","width","playerVars","events","onReady","event","target","playVideo","contains","URLSearchParams","addYTPlayerIframe","iframeEl","height","title","allow","allowFullscreen","encodeURIComponent","toString","focus","customElements","define"],"version":3,"file":"index.37624d81.js.map"}